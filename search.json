[{"path":[]},{"path":"/articles/FFire-vignette.html","id":"convert_to_num","dir":"Articles","previous_headings":"ETL","what":"convert_to_num()","title":"FFire-vignette","text":"function convert_to_num() converts columns can coerced numeric type data frame numeric type. example, given following dataframe: can see column num_saved_as_char contains numbers saved characters! want tread numerical values numerical values though. Using convert_to_num() convert column num_saved_as_char numeric values: can see, output functions returns dataframe column num_saved_as_char formatted numeric values!","code":"data_frame_c2n = data.frame(   num_saved_as_char = c('1','2'),   classes = c('class1', 'class2') ) convert_to_num(data_frame_c2n, 'num_saved_as_char') #>   num_saved_as_char classes #> 1                 1  class1 #> 2                 2  class2"},{"path":"/articles/FFire-vignette.html","id":"df_load","dir":"Articles","previous_headings":"ETL","what":"df_load()","title":"FFire-vignette","text":"function loads preprocesses dataset CSV file, splits date frame horizontally 2 parts first part tidy whereas second part messy, split unused lines part, correct wrong row entries second part, convert numeric columns correct data type second part, combine data together finally. Examples follows: Now given url untidy data frame, line 2 every entries look good, want split data frame line 2 horzointally skip 0 lines reading data. maximum number lines read 2 parst 3 2 respectively. error entries line 2, 1 correct value, error entries 2:4 columns. assign list corrected values list(3.5, 1.4, 0.2, “setosa”). Later convert column petal_width numeric assign variable species predictedfactor can see, output preprocessed data frame, messy entries corrected, unused lines skipped, data types converted.","code":"df_load(    url = \"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv\",    skip1 = 0,    skip2 = 0,    n_max1 = 3,    n_max2 = 2,    error_line = 2,    error_record = 2:4,    correct_bef_error_record = 1,    val_corrected = list(3.5, 1.4, 0.2, \"setosa\"),    error_col = c(\"petal_width\"),    predicted_factor = \"species\"  ) #> # A tibble: 5 × 5 #>   sepal_length sepal_width petal_length petal_width species #>          <dbl>       <dbl>        <dbl>       <dbl> <fct>   #> 1          5.1         3.5          1.4         0.2 setosa  #> 2          4.9         3.5          1.4         0.2 setosa  #> 3          5.1         3.5          1.4         0.2 setosa  #> 4          4.9         3            1.4         0.2 setosa  #> 5          4.7         3.2          1.3         0.2 setosa"},{"path":"/articles/FFire-vignette.html","id":"filter_data","dir":"Articles","previous_headings":"ETL","what":"filter_data()","title":"FFire-vignette","text":"function calculates metrics based given algorithm (e.g. mean, range, etc.) used dataset (e.g. fire_train) filters data given column name specific value column range. example, given following dataframe: Now, let’s say want get mean value columns length height, discarding depth column filtering “big” entries. can follows: Now, like get range selected columns can simply run following command: first row shows minimum value given column second row shows maximum value column.","code":"data_frame_filter_data = data.frame(      type = c(\"big\", \"big\", \"small\"),      length = c(5.2, 2.1, 1.2),      height = c(10.1, 20.1, 4.2),      depth = c(3, 2, 1.8)    )   data_frame_filter_data #>    type length height depth #> 1   big    5.2   10.1   3.0 #> 2   big    2.1   20.1   2.0 #> 3 small    1.2    4.2   1.8 filter_data(data_frame_filter_data, type, \"big\", height, depth, mean) #> # A tibble: 1 × 2 #>   height depth #>    <dbl> <dbl> #> 1   15.1   2.5 filter_data(data_frame_filter_data, type, \"big\", height, depth, range) #> # A tibble: 2 × 2 #>   height depth #>    <dbl> <dbl> #> 1   10.1     2 #> 2   20.1     3"},{"path":[]},{"path":"/articles/FFire-vignette.html","id":"plot_scatter_graph","dir":"Articles","previous_headings":"Visualization","what":"plot_scatter_graph()","title":"FFire-vignette","text":"function can used plot two dimensional scatter plot! example, lets say want plot following data: like visualize data dryness x axis temperature y axis. like label axis uppercase name like title legend “Presence fire”. don’t want plot big want define height, width text size ensure readability.  Now, wanted double height graph simply change parameter plot_height:  change header legend:  Accordingly can also change labels x y axis:","code":"data_frame_scatter_plot = data.frame(      dryness = c(5.2, 2.1, 5.2),       temperature = c(10.1, 2.1, 4.2),      Classes = c(\"fire\", \"fire\", \"no fire\")    ) plot_scatter_graph(    data_frame_scatter_plot,    plot_width = 10, plot_height = 10, x_axis_data = temperature,    y_axis_data = dryness, x_axis_label = \"Temperature\",    y_axis_label = \"Dryness\", text_size = 20, color = Classes,    color_label = \"Presence of fire\"  ) plot_scatter_graph(    data_frame_scatter_plot,    plot_width = 10, plot_height = 20, x_axis_data = temperature,    y_axis_data = dryness, x_axis_label = \"Temperature\",    y_axis_label = \"Dryness\", text_size = 20, color = Classes,    color_label = \"Presence of fire\"  ) plot_scatter_graph(    data_frame_scatter_plot,    plot_width = 10, plot_height = 10, x_axis_data = temperature,    y_axis_data = dryness, x_axis_label = \"Temperature\",    y_axis_label = \"Dryness\", text_size = 20, color = Classes,    color_label = \"Is a fire present?\"  ) plot_scatter_graph(    data_frame_scatter_plot,    plot_width = 10, plot_height = 10, x_axis_data = temperature,    y_axis_data = dryness, x_axis_label = \"Factor 1\",    y_axis_label = \"Factor 2\", text_size = 20, color = Classes,    color_label = \"Presence of fire\"  )"},{"path":"/articles/FFire-vignette.html","id":"plot_line_graph","dir":"Articles","previous_headings":"Visualization","what":"plot_line_graph()","title":"FFire-vignette","text":"function can draw line plot! Let’s assume following data depicts likely person going get ice cream given temperature: like visualize data temperature x axis probability y axis. like label axis uppercase name. don’t want plot big want define height, width ensure readability. can follows:  Now change name x axis:","code":"data_frame_line_plot = data.frame(      temperature = c(5, 15, 25),       probability = c(0.20, 0.70, 0.95)      ) plot_line_graph(    data = data_frame_line_plot,    plot_width = 10,     plot_height = 10,    x_axis_data = temperature,     y_axis_data = probability,     x_axis_label = \"Temperature\",    y_axis_label = \"Probability\"  ) plot_line_graph(    data = data_frame_line_plot,    plot_width = 10,     plot_height = 10,    x_axis_data = temperature,     y_axis_data = probability,     x_axis_label = \"Temperature\",    y_axis_label = \"Likelihood\"  )"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan Zimny. Author, maintainer. Jinghan Xu. Author. Rocky Zhao. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zimny J, Xu J, Zhao R (2023). FFire: Forest Fire Function Toolkit. R package version 0.0.1.","code":"@Manual{,   title = {FFire: Forest Fire Function Toolkit},   author = {Jan Zimny and Jinghan Xu and Rocky Zhao},   year = {2023},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"ffire-r-package","dir":"","previous_headings":"","what":"Forest Fire Function Toolkit","title":"Forest Fire Function Toolkit","text":"package contains following functions: convert_to_num() df_load() filter_data() plot_scatter_graph() plot_line_graph() first three helpful loading transforming data, later two helpful visualizing . Instructions installation load package can found README.md. looking detailed examples use package, please look vignettes.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forest Fire Function Toolkit","text":"installation package need R RStudio installed. recommend R 4.1.3. Inside RStudio first need install devtools. can opening consol running install.packages(\"devtools\") Afterwards load library library(devtools) run devtools::install_github(\"DSCI-310/dsci-310-group-10-GCC-pkg\") install package.","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Forest Fire Function Toolkit","text":"use library just need load library(FFire) ready use documented functions package!","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Forest Fire Function Toolkit","text":"software provided project offered MIT open source license. See license file information.","code":""},{"path":"/reference/convert_to_num.html","id":null,"dir":"Reference","previous_headings":"","what":"convert_to_num: — convert_to_num","title":"convert_to_num: — convert_to_num","text":"Converts columns can coerced numeric type data frame numeric type.","code":""},{"path":"/reference/convert_to_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"convert_to_num: — convert_to_num","text":"","code":"convert_to_num(df, cols)"},{"path":"/reference/convert_to_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"convert_to_num: — convert_to_num","text":"df dataframe containing columns converted cols vector column names converted numeric type","code":""},{"path":"/reference/convert_to_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"convert_to_num: — convert_to_num","text":"dataframe containing converted numeric columns","code":""},{"path":"/reference/convert_to_num.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"convert_to_num: — convert_to_num","text":"","code":"convert_to_num(data.frame(c_to_n = c('1','2')), 'c_to_n') #>   c_to_n #> 1      1 #> 2      2"},{"path":"/reference/df_load.html","id":null,"dir":"Reference","previous_headings":"","what":"df_load — df_load","title":"df_load — df_load","text":"function load preprocess dataset CSV file, split date frame 2 parts first part nice formatted second part need manipulation, correct wrong row entries second part, convert numeric columns correct data type, combine data together.","code":""},{"path":"/reference/df_load.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"df_load — df_load","text":"","code":"df_load(   url,   skip1,   skip2,   n_max1,   n_max2,   error_line,   error_record,   correct_bef_error_record,   val_corrected,   error_col,   predicted_factor )"},{"path":"/reference/df_load.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"df_load — df_load","text":"url quoted URL file path CSV file. skip1 number rows skip beginning file first splited dataset. skip2 number rows skip beginning file second splited dataframe. n_max1 maximum number rows read first splited dataframe. n_max2 maximum number rows read second splited dataframe. error_line row index containing errors need corrected. error_record vector column indices containing errors need corrected. correct_bef_error_record number correctly formatted rows row containing errors. val_corrected list corrected entries error_line. error_col vector corrected values error columns. predicted_factor quoted column name converted factor.","code":""},{"path":"/reference/df_load.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"df_load — df_load","text":"preprocessed data frame, missing values corrected data types converted.","code":""},{"path":"/reference/df_load.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"df_load — df_load","text":"","code":"df_load(   url = \"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/iris.csv\",   skip1 = 0,   skip2 = 0,   n_max1 = 3,   n_max2 = 2,   error_line = 2,   error_record = 2:4,   correct_bef_error_record = 1,   val_corrected = list(3.5, 1.4, 0.2, \"setosa\"),   error_col = c(\"petal_width\"),   predicted_factor = \"species\" ) #> # A tibble: 5 × 5 #>   sepal_length sepal_width petal_length petal_width species #>          <dbl>       <dbl>        <dbl>       <dbl> <fct>   #> 1          5.1         3.5          1.4         0.2 setosa  #> 2          4.9         3.5          1.4         0.2 setosa  #> 3          5.1         3.5          1.4         0.2 setosa  #> 4          4.9         3            1.4         0.2 setosa  #> 5          4.7         3.2          1.3         0.2 setosa"},{"path":"/reference/filter_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter data function — filter_data","title":"Filter data function — filter_data","text":"function calculates metrics based given algorithm (e.g. mean, range, etc.) used dataset (e.g. fire_train) filters data given column name value column range","code":""},{"path":"/reference/filter_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter data function — filter_data","text":"","code":"filter_data(data, col_to_filter_by, subset, start_col, end_col, alg)"},{"path":"/reference/filter_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter data function — filter_data","text":"data Data filtered col_to_filter_by Name column used filtering data. subset filtering condition targeted function follow. start_col start column range selected data. end_col end column range selected data. alg filtering algorithm targeted function follow.","code":""},{"path":"/reference/filter_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter data function — filter_data","text":"Return data filtered parameters .","code":""},{"path":"/reference/filter_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter data function — filter_data","text":"","code":"filter_data(   data.frame(     type = c(\"big\", \"big\", \"small\"),     length = c(5.2, 2.1, 1.2),     height = c(10.1, 20.1, 4.2),     depth = c(3, 2, 1.8)   ), type, \"big\", height, depth, mean ) #> # A tibble: 1 × 2 #>   height depth #>    <dbl> <dbl> #> 1   15.1   2.5"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/plot_line_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Line plot function — plot_line_graph","title":"Line plot function — plot_line_graph","text":"function plots line graph given data column names visualize enables customize graphs axis labels plot dimensions","code":""},{"path":"/reference/plot_line_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Line plot function — plot_line_graph","text":"","code":"plot_line_graph(   data,   plot_width,   plot_height,   x_axis_data,   y_axis_data,   x_axis_label,   y_axis_label )"},{"path":"/reference/plot_line_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Line plot function — plot_line_graph","text":"data data visualized plot_width width plot plot_height height plot x_axis_data data displayed x axis y_axis_data data displayed y axis x_axis_label Label displayed plot x axis y_axis_label Label displayed plot y axis","code":""},{"path":"/reference/plot_line_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Line plot function — plot_line_graph","text":"generated plot","code":""},{"path":"/reference/plot_line_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Line plot function — plot_line_graph","text":"","code":"plot_line_graph(   data = data.frame(neighbors = c(1, 2, 3), mean = c(0.80, 0.85, 0.95)),   plot_width = 10, plot_height = 10,   x_axis_data = neighbors, y_axis_data = mean, x_axis_label = \"Neighbors\",   y_axis_label = \"Accuracy Estimate\" )"},{"path":"/reference/plot_scatter_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatter plot function — plot_scatter_graph","title":"Scatter plot function — plot_scatter_graph","text":"function plots scatter graph given data column names visualize enables customize graphs axis labels plot dimensions","code":""},{"path":"/reference/plot_scatter_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatter plot function — plot_scatter_graph","text":"","code":"plot_scatter_graph(   data,   plot_width,   plot_height,   x_axis_data,   y_axis_data,   x_axis_label,   y_axis_label,   text_size,   color,   color_label )"},{"path":"/reference/plot_scatter_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatter plot function — plot_scatter_graph","text":"data data visualized plot_width width plot plot_height height plot x_axis_data data displayed x axis y_axis_data data displayed y axis x_axis_label Label displayed plot x axis y_axis_label Label displayed plot y axis text_size Text size applied text plot color Name label column dataset color_label Defines labels colors","code":""},{"path":"/reference/plot_scatter_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatter plot function — plot_scatter_graph","text":"generated plot","code":""},{"path":"/reference/plot_scatter_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatter plot function — plot_scatter_graph","text":"","code":"plot_scatter_graph(   data = data.frame(     ISI = c(5.2, 2.1, 5.2), BUI = c(10.1, 2.1, 4.2),     Classes = c(\"fire\", \"fire\", \"no fire\")   ),   plot_width = 10, plot_height = 10, x_axis_data = ISI,   y_axis_data = BUI, x_axis_label = \"ISI\",   y_axis_label = \"BUI\", text_size = 20, color = Classes,   color_label = \"Presence of fire\" )"},{"path":"/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"page lists tidy eval tools reexported package rlang. learn using tidy eval scripts packages high level, see dplyr programming vignette ggplot2 packages vignette. Metaprogramming section Advanced R may also useful deeper dive. tidy eval operators {{, !!, !!! syntactic constructs specially interpreted tidy eval functions. mostly need {{, !! !!! advanced operators use simple cases. curly-curly operator {{ allows tunnel data-variables passed function arguments inside tidy eval functions. {{ designed individual arguments. pass multiple arguments contained dots, use ... normal way.   enquo() enquos() delay execution one several function arguments. former returns single expression, latter returns list expressions. defused, expressions longer evaluate . must injected back evaluation context !! (single expression) !!! (list expressions).   simple case, code equivalent usage {{ ... . Defusing enquo() enquos() needed complex cases, instance need inspect modify expressions way. .data pronoun object represents current slice data. variable name string, use .data pronoun subset variable [[.   Another tidy eval operator :=. makes possible use glue curly-curly syntax LHS =. technical reasons, R language support complex expressions left =, use := workaround.   Many tidy eval functions like dplyr::mutate() dplyr::summarise() give automatic name unnamed inputs. need create sort automatic names , use as_label(). instance, glue-tunnelling syntax can reproduced manually :   Expressions defused enquo() (tunnelled {{) need simple column names, can arbitrarily complex. as_label() handles cases gracefully. code assumes simple column name, use as_name() instead. safer throws error input name expected.","code":"my_function <- function(data, var, ...) {   data %>%     group_by(...) %>%     summarise(mean = mean({{ var }})) } my_function <- function(data, var, ...) {   # Defuse   var <- enquo(var)   dots <- enquos(...)    # Inject   data %>%     group_by(!!!dots) %>%     summarise(mean = mean(!!var)) } my_var <- \"disp\" mtcars %>% summarise(mean = mean(.data[[my_var]])) my_function <- function(data, var, suffix = \"foo\") {   # Use `{{` to tunnel function arguments and the usual glue   # operator `{` to interpolate plain strings.   data %>%     summarise(\"{{ var }}_mean_{suffix}\" := mean({{ var }})) } my_function <- function(data, var, suffix = \"foo\") {   var <- enquo(var)   prefix <- as_label(var)   data %>%     summarise(\"{prefix}_mean_{suffix}\" := mean(!!var)) }"}]
